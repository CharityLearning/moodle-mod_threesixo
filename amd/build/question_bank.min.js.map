{"version":3,"file":"question_bank.min.js","sources":["../src/question_bank.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD code for the Question Bank.\n *\n * The question bank dialogue contains all the questions that can be added to the 360 feedback activity.\n * It also serves as the interface where questions can be added, edited, or even removed permanently from the question bank.\n *\n * @module     mod_threesixo/question_bank\n * @class      question_bank\n * @copyright  2016 Jun Pataleta <jun@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as templates from 'core/templates';\nimport * as notification from 'core/notification';\nimport * as ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Pending from 'core/pending';\nimport {notifyItemsUpdated} from \"mod_threesixo/events\";\nimport * as CheckboxToggleAll from 'core/checkbox-toggleall';\n\nconst SELECTORS = {\n    PICK_ALL: '#pick-all',\n    ADD_QUESTION: '#btn-question-bank-add',\n    QUESTION_CHECKBOX: '.question-checkbox',\n    DELETE_QUESTION: '.delete-question-button',\n    EDIT_QUESTION: '.edit-question-button',\n};\n\n// Private variables and functions.\nlet selectedQuestionsOld,\n    selectedQuestions,\n    questions = [],\n    threeSixtyId,\n    questionTypes;\n\n/**\n * Fetches option data for the question type selector.\n *\n * @param {number} selectedId The currently selected question type.\n * @returns {Array}\n */\nfunction getQuestionTypeOptions(selectedId) {\n    const questionTypeOptions = [];\n    // Get question type options.\n    for (const key in questionTypes) {\n        if (!questionTypes.hasOwnProperty(key)) {\n            continue;\n        }\n        const questionType = {\n            typeVal: key,\n            typeName: questionTypes[key],\n        };\n\n        if (typeof selectedId !== 'undefined') {\n            questionType.selected = parseInt(key) === parseInt(selectedId);\n        }\n\n        questionTypeOptions.push(questionType);\n    }\n\n    return questionTypeOptions;\n}\n\n/**\n * Loops over the list of questions and marks a question as checked if it belongs to the list of selected questions.\n *\n * @param {Object[]} questions The questions to be checked.\n * @returns {Object[]} The list of checked questions.\n */\nfunction checkQuestions(questions) {\n    for (const i in questions) {\n        const question = questions[i];\n        if (selectedQuestions.indexOf(questions[i].id) !== -1) {\n            question.checked = true;\n        }\n    }\n    return questions;\n}\n\n/**\n * Renders the question input dialogue.\n *\n * @param {String} dialogueTitle\n * @param {Object} bodyTemplate\n */\nconst renderInputDialogue = async(dialogueTitle, bodyTemplate) => {\n    const pendingPromise = new Pending('mod_threesixo/question_input');\n    const modal = await ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: dialogueTitle,\n        body: bodyTemplate,\n        large: true\n    });\n    // Display the dialogue.\n    modal.show();\n\n    modal.getRoot().on(ModalEvents.bodyRendered, function() {\n        // Focus on the question text area.\n        const questionInput = document.getElementById(\"question-input\");\n        if (questionInput) {\n            questionInput.focus();\n        }\n    });\n\n    // On hide handler.\n    modal.getRoot().on(ModalEvents.hidden, function() {\n        // Just destroy the modal.\n        modal.destroy();\n    });\n\n    // On save handler.\n    modal.getRoot().on(ModalEvents.save, () => {\n        const questionInput = document.getElementById(\"question-input\");\n        const question = questionInput.value.trim();\n        // Validate the entered question. Prevent saving if passing an empty question string.\n        if (!question) {\n            question.value = '';\n            const form = questionInput.form;\n            form.classList.add('was-validated');\n            questionInput.classList.add('is-invalid');\n            questionInput.focus();\n            return false;\n        }\n        const qtype = document.getElementById(\"question-type-select\").value;\n        const threesixtyid = document.getElementById(\"threesixtyid\").value;\n\n        const data = {\n            question: question,\n            type: qtype,\n            threesixtyid: threesixtyid,\n        };\n\n        let method = 'mod_threesixo_add_question';\n        const questionId = document.getElementById(\"question-id\").value;\n        if (questionId) {\n            method = 'mod_threesixo_update_question';\n            data.id = questionId;\n        }\n\n        // Refresh the list of questions through AJAX.\n        const promises = ajax.call([\n            {methodname: method, args: data}\n        ]);\n        return promises[0].then(function() {\n            return refreshQuestionsList();\n        }).catch(notification.exception);\n    });\n\n    pendingPromise.resolve();\n};\n\n/**\n * Function that displays the input dialogue.\n *\n * @param {Number} threesixtyId The 360 instance ID.\n * @param {Number} questionId The question ID.\n */\nconst displayInputDialogue = async(threesixtyId, questionId) => {\n    const dialogueTitle = await getString('addanewquestion', 'mod_threesixo');\n    const data = {\n        threesixtyid: threesixtyId\n    };\n\n    if (questionId) {\n        data.questionid = questionId;\n        for (const i in questions) {\n            const question = questions[i];\n            if (question.id === questionId) {\n                data.question = question.question;\n                data.type = question.type;\n                break;\n            }\n        }\n    }\n\n    data.questionTypes = getQuestionTypeOptions(data.type);\n    const body = await templates.render('mod_threesixo/item_edit', data);\n    await renderInputDialogue(dialogueTitle, body);\n};\n\n/**\n * Displays the question bank dialogue.\n *\n * @param {string} title\n * @param {Promise} questionBankTemplate\n */\nconst displayQuestionBankDialogue = async(title, questionBankTemplate) => {\n    const pendingPromise = new Pending('mod_threesixo/question_bank');\n\n    const modal = await ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: title,\n        body: questionBankTemplate,\n        large: true\n    });\n    const modalRoot = modal.getRoot();\n\n    // On hide handler.\n    modalRoot.on(ModalEvents.hidden, function() {\n        // Empty modal contents when it's hidden.\n        modal.destroy();\n    });\n\n    modalRoot.on(ModalEvents.save, function() {\n        let changed = false;\n        // Check if the new selected questions exist in the old selected questions.\n        selectedQuestionsOld.forEach(questionId => {\n            if (selectedQuestions.indexOf(questionId) === -1) {\n                changed = true;\n            }\n        });\n        // Conversely, if the newly selected items seem to have not changed,\n        // check if the old selected questions exist in the new selected questions.\n        if (!changed) {\n            selectedQuestions.forEach(questionId => {\n                if (selectedQuestionsOld.indexOf(questionId) === -1) {\n                    changed = true;\n                }\n            });\n        }\n\n        if (changed) {\n            const data = {\n                threesixtyid: threeSixtyId,\n                questionids: selectedQuestions\n            };\n\n            // Save the selected questions.\n            const promises = ajax.call([\n                {methodname: 'mod_threesixo_set_items', args: data}\n            ]);\n            // Refresh the list of questions through AJAX.\n            promises[0].then(function() {\n                return notifyItemsUpdated(threeSixtyId);\n            }).catch(notification.exception);\n        } else {\n            // Nothing changed in the selection, but it's possible that the question texts have been updated.\n            // So better to refresh the list as well.\n            notifyItemsUpdated(threeSixtyId);\n        }\n    });\n\n    // Display the dialogue.\n    modal.show();\n\n    pendingPromise.resolve();\n};\n\n/**\n * Adds/removes a question from the array of selected questions depending on its selection state.\n *\n * @param {number} questionId\n * @param {boolean} isSelected\n */\nconst updateItemSelection = (questionId, isSelected) => {\n    if (isSelected) {\n        const index = selectedQuestions.indexOf(questionId);\n        if (index === -1) {\n            // Add the question ID if it's not yet present.\n            selectedQuestions.push(questionId);\n        }\n    } else {\n        const index = selectedQuestions.indexOf(questionId);\n        if (index > -1) {\n            // Remove the question ID only if it's present.\n            selectedQuestions.splice(index, 1);\n        }\n    }\n};\n\n/**\n * Binds the event listeners to question items such as edit, delete, checking.\n */\nconst registerEvents = function() {\n    document.addEventListener('click', async(e) => {\n        if (e.target.closest(SELECTORS.PICK_ALL)) {\n            const questionCheckboxes = document.querySelectorAll(SELECTORS.QUESTION_CHECKBOX);\n            questionCheckboxes.forEach(checkbox => {\n                const questionId = parseInt(checkbox.dataset.questionid);\n                updateItemSelection(questionId, checkbox.checked);\n            });\n        } else if (e.target.closest(SELECTORS.QUESTION_CHECKBOX)) {\n            const questionCheckbox = e.target.closest(SELECTORS.QUESTION_CHECKBOX);\n            const questionId = parseInt(questionCheckbox.dataset.questionid);\n\n            updateItemSelection(questionId, questionCheckbox.checked);\n        } else if (e.target.closest(SELECTORS.EDIT_QUESTION)) {\n            e.preventDefault();\n\n            const editQuestionButton = e.target.closest(SELECTORS.EDIT_QUESTION);\n            const threesixtyId = parseInt(editQuestionButton.dataset.threesixtyid);\n            const questionId = parseInt(editQuestionButton.dataset.questionid);\n            await displayInputDialogue(threesixtyId, questionId);\n        } else if (e.target.closest(SELECTORS.DELETE_QUESTION)) {\n            e.preventDefault();\n\n            const deleteButton = e.target.closest(SELECTORS.DELETE_QUESTION);\n            const threesixtyId = parseInt(deleteButton.dataset.threesixtyid);\n            const questionId = parseInt(deleteButton.dataset.questionid);\n            await handleDeletion(questionId, threesixtyId);\n        } else if (e.target.closest(SELECTORS.ADD_QUESTION)) {\n            e.preventDefault();\n\n            const addButton = e.target.closest(SELECTORS.ADD_QUESTION);\n            const id = parseInt(addButton.dataset.threesixtyid);\n            await displayInputDialogue(id, null);\n        }\n    });\n};\n\n/**\n * Refreshes the list of questions in the question bank.\n */\nfunction refreshQuestionsList() {\n    // Get list of questions through AJAX.\n    const promises = ajax.call([\n        {\n            methodname: 'mod_threesixo_get_questions',\n            args: {}\n        }\n    ]);\n    promises[0].then(response => {\n        questions = response.questions;\n        const data = {\n            pickerMode: threeSixtyId,\n            questions: checkQuestions(questions)\n        };\n\n        return templates.render('mod_threesixo/question_list', data);\n    }).then(compiledSource => {\n        const questionListWrapper = document.querySelector(\"#questionListWrapper\");\n        if (questionListWrapper) {\n            questionListWrapper.innerHTML = compiledSource;\n        }\n        return null;\n    }).catch(notification.exception);\n}\n\n/**\n * Handles item deletion.\n *\n * @param {Number} questionId The question ID.\n * @param {Number} threesixtyId The 360 instance ID.\n */\nconst handleDeletion = async(questionId, threesixtyId) => {\n    const delTitle = await getString('deletequestion', 'mod_threesixo');\n    const modal = await ModalFactory.create({\n        title: delTitle,\n        body: getString('confirmquestiondeletion', 'mod_threesixo'),\n        type: ModalFactory.types.SAVE_CANCEL\n    });\n\n    modal.getRoot().on(ModalEvents.save, function() {\n        // Get list of questions through AJAX.\n        const promises = ajax.call([\n            {\n                methodname: 'mod_threesixo_delete_question',\n                args: {\n                    id: questionId,\n                    threesixtyid: threesixtyId,\n                }\n            }\n        ]);\n        promises[0].then(function() {\n            return refreshQuestionsList();\n        }).catch(notification.exception);\n    });\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        modal.destroy();\n    });\n\n    return modal.show();\n};\n\n/**\n * Create the context and render the question  bank template.\n */\nconst renderQuestionBank = async() => {\n    // Template context.\n    const context = {pickerMode: threeSixtyId};\n\n    // Render the question list.\n    const response = await ajax.call([\n        {\n            methodname: 'mod_threesixo_get_questions',\n            args: {}\n        }\n    ])[0];\n\n    questions = response.questions;\n    context.questions = checkQuestions(questions);\n\n    // Render the template and display the comment chooser dialog.\n    const questionBankTemplate = await templates.render('mod_threesixo/question_bank', context);\n    const dialogueTitle = await getString('labelpickfromquestionbank', 'mod_threesixo');\n    await displayQuestionBankDialogue(dialogueTitle, questionBankTemplate);\n\n    if (threeSixtyId) {\n        CheckboxToggleAll.init();\n    }\n};\n\nconst questionBankInit = function(id) {\n    threeSixtyId = id;\n\n    const methodCalls = [\n        {\n            methodname: 'mod_threesixo_get_question_types',\n            args: {}\n        }\n    ];\n\n    if (threeSixtyId) {\n        // Get selected items for the 360-degree feedback.\n        methodCalls.push({\n            methodname: 'mod_threesixo_get_items',\n            args: {\n                threesixtyid: threeSixtyId\n            }\n        });\n    }\n\n    // Get list of questions through AJAX.\n    const promises = ajax.call(methodCalls);\n    promises[0].then(function(response) {\n        questionTypes = response.questiontypes;\n        if (threeSixtyId) {\n            return promises[1];\n        }\n        return renderQuestionBank();\n    }).then(response => {\n        if (response === null) {\n            return false;\n        }\n        selectedQuestions = [];\n        selectedQuestionsOld = [];\n        const items = response.items;\n        for (const i in items) {\n            if (!items.hasOwnProperty(i)) {\n                continue;\n            }\n            selectedQuestions.push(items[i].questionid);\n            // Store originally selected question IDs for comparison later.\n            selectedQuestionsOld.push(items[i].questionid);\n        }\n        return renderQuestionBank();\n    }).catch(notification.exception);\n\n    registerEvents();\n};\n\n/** @alias module:mod_threesixo/question_bank */\nexport default {\n    init: questionBankInit,\n};\n"],"names":["SELECTORS","selectedQuestionsOld","selectedQuestions","threeSixtyId","questionTypes","questions","checkQuestions","i","question","indexOf","id","checked","displayInputDialogue","async","threesixtyId","questionId","dialogueTitle","data","threesixtyid","questionid","type","selectedId","questionTypeOptions","key","hasOwnProperty","questionType","typeVal","typeName","selected","parseInt","push","getQuestionTypeOptions","body","templates","render","bodyTemplate","pendingPromise","Pending","modal","ModalFactory","create","types","SAVE_CANCEL","title","large","show","getRoot","on","ModalEvents","bodyRendered","questionInput","document","getElementById","focus","hidden","destroy","save","value","trim","form","classList","add","method","ajax","call","methodname","args","then","refreshQuestionsList","catch","notification","exception","resolve","renderInputDialogue","updateItemSelection","isSelected","index","splice","response","pickerMode","compiledSource","questionListWrapper","querySelector","innerHTML","handleDeletion","delTitle","renderQuestionBank","context","questionBankTemplate","modalRoot","changed","forEach","questionids","displayQuestionBankDialogue","CheckboxToggleAll","init","methodCalls","promises","questiontypes","items","addEventListener","e","target","closest","querySelectorAll","checkbox","dataset","questionCheckbox","preventDefault","editQuestionButton","deleteButton","addButton"],"mappings":"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"}