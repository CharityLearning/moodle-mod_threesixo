{"version":3,"file":"question_bank.min.js","sources":["../src/question_bank.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD code for the Question Bank.\n *\n * The question bank dialogue contains all the questions that can be added to the 360 feedback activity.\n * It also serves as the interface where questions can be added, edited, or even removed permanently from the question bank.\n *\n * @module     mod_threesixo/question_bank\n * @class      question_bank\n * @copyright  2016 Jun Pataleta <jun@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/templates',\n    'core/notification',\n    'core/ajax',\n    'core/str',\n    'core/modal_factory',\n    'core/modal_events'\n], function($, templates, notification, ajax, str, ModalFactory, ModalEvents) {\n\n    // Private variables and functions.\n    var selectedQuestionsOld,\n        selectedQuestions,\n        questions = [],\n        threeSixtyId,\n        questionTypes,\n        questionBankDialogue,\n        inputDialogue;\n\n    /**\n     * Fetches option data for the question type selector.\n     *\n     * @param {number} selectedId The currently selected question type.\n     * @returns {Array}\n     */\n    function getQuestionTypeOptions(selectedId) {\n        var questionTypeOptions = [];\n        // Get question type options.\n        for (var key in questionTypes) {\n            if (!questionTypes.hasOwnProperty(key)) {\n                continue;\n            }\n            var questionType = {\n                typeVal: key,\n                typeName: questionTypes[key]\n            };\n\n            if (typeof selectedId !== 'undefined' && key == selectedId) {\n                questionType.selected = true;\n            }\n\n            questionTypeOptions.push(questionType);\n        }\n\n        return questionTypeOptions;\n    }\n\n    /**\n     * Loops over the list of questions and marks a question as checked if it belongs to the list of selected questions.\n     *\n     * @param {Object[]} questions The questions to be checked.\n     * @returns {Object[]} The list of checked questions.\n     */\n    function checkQuestions(questions) {\n        for (var i in questions) {\n            var question = questions[i];\n            if (selectedQuestions.indexOf(questions[i].id) !== -1) {\n                question.checked = true;\n            }\n        }\n        return questions;\n    }\n\n    /**\n     * Renders the question input dialogue.\n     *\n     * @param {String} dialogueTitle\n     * @param {Object} bodyTemplate\n     */\n    function renderInputDialogue(dialogueTitle, bodyTemplate) {\n        // Set dialog's body content.\n        if (inputDialogue) {\n            // Set dialogue body.\n            inputDialogue.setBody(bodyTemplate);\n            // Display the dialogue.\n            inputDialogue.show();\n\n        } else {\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: dialogueTitle,\n                body: bodyTemplate,\n                large: true\n            }).then(function(modal) {\n                inputDialogue = modal;\n\n                // Display the dialogue.\n                inputDialogue.show();\n\n                // On show handler.\n                modal.getRoot().on(ModalEvents.shown, function() {\n                    // Focus on the question text area.\n                    $(\"#question-input\").focus();\n                });\n\n                // On hide handler.\n                modal.getRoot().on(ModalEvents.hidden, function() {\n                    // Empty modal contents when it's hidden.\n                    modal.setBody('');\n                });\n\n                // On save handler.\n                modal.getRoot().on(ModalEvents.save, function() {\n                    var question = $(\"#question-input\").val().trim();\n                    if (!question) {\n                        str.get_string('requiredelement', 'form').done(function(errorMsg) {\n                            var errorMessage = $('<div/>').append(errorMsg)\n                                .attr('class', 'alert alert-error')\n                                .attr('role', 'alert');\n                            $('.error-container').html(errorMessage);\n                        }).fail(notification.exception);\n                        return;\n                    }\n                    var qtype = $(\"#question-type-select\").val();\n                    var threesixtyid = $(\"#threesixtyid\").val();\n\n                    var data = {\n                        question: question,\n                        type: qtype,\n                        threesixtyid: threesixtyid,\n                    };\n\n                    var method = 'mod_threesixo_add_question';\n                    var questionId = $(\"#question-id\").val();\n                    if (questionId) {\n                        method = 'mod_threesixo_update_question';\n                        data.id = questionId;\n                    }\n\n                    // Refresh the list of questions thru AJAX.\n                    var promises = ajax.call([\n                        {methodname: method, args: data}\n                    ]);\n                    promises[0].done(function() {\n                        refreshQuestionsList();\n                    }).fail(notification.exception);\n                });\n                return;\n            }).catch(notification.exception);\n        }\n    }\n\n    /**\n     * Function that displays the input dialogue.\n     *\n     * @param {Number} threesixtyId The 360 instance ID.\n     * @param {Number} questionId The question ID.\n     */\n    var displayInputDialogue = function(threesixtyId, questionId) {\n        str.get_string('addanewquestion', 'mod_threesixo').done(function(title) {\n            var data = {\n                threesixtyid: threesixtyId\n            };\n\n            if (typeof questionId !== 'undefined') {\n                data.questionid = questionId;\n                for (var i in questions) {\n                    var question = questions[i];\n                    if (question.id === questionId) {\n                        data.question = question.question;\n                        data.type = question.type;\n                        break;\n                    }\n                }\n            }\n\n            data.questionTypes = getQuestionTypeOptions(data.type);\n            var body = templates.render('mod_threesixo/item_edit', data);\n            renderInputDialogue(title, body);\n        }).fail(notification.exception);\n    };\n\n    /**\n     * Displays the question bank dialogue.\n     * @param {string} title\n     * @param {Promise} questionBankTemplate\n     */\n    function displayQuestionBankDialogue(title, questionBankTemplate) {\n        // Set dialog's body content.\n        if (questionBankDialogue) {\n            // Set dialogue body.\n            questionBankDialogue.setBody(questionBankTemplate);\n            // Display the dialogue.\n            questionBankDialogue.show();\n\n        } else {\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: title,\n                body: questionBankTemplate,\n                large: true\n            }).then(function(modal) {\n                var modalRoot = modal.getRoot();\n\n                // On hide handler.\n                modalRoot.on(ModalEvents.hidden, function() {\n                    // Empty modal contents when it's hidden.\n                    modal.setBody('');\n                });\n\n                modalRoot.on(ModalEvents.save, function() {\n                    var changed = false;\n                    // Check if the new selected questions exist in the old selected questions.\n                    $.each(selectedQuestionsOld, function(key, questionId) {\n                        if (selectedQuestions.indexOf(questionId) === -1) {\n                            changed = true;\n                        }\n                    });\n                    // Conversely, if the newly selected items seem to have not changed,\n                    // check if the old selected questions exist in the new selected questions.\n                    if (!changed) {\n                        $.each(selectedQuestions, function(key, questionId) {\n                            if (selectedQuestionsOld.indexOf(questionId) === -1) {\n                                changed = true;\n                            }\n                        });\n                    }\n\n                    if (changed) {\n                        var data = {\n                            threesixtyid: threeSixtyId,\n                            questionids: selectedQuestions\n                        };\n\n                        // Refresh the list of questions thru AJAX.\n                        var promises = ajax.call([\n                            {methodname: 'mod_threesixo_set_items', args: data}\n                        ]);\n                        promises[0].done(function() {\n                            // Refresh the items list if the selection has changed.\n                            require(['mod_threesixo/edit_items'], function(items) {\n                                items.refreshItemList();\n                            });\n                        }).fail(notification.exception);\n                    }\n                });\n\n                questionBankDialogue = modal;\n\n                // Display the dialogue.\n                questionBankDialogue.show();\n                return;\n            }).catch(notification.exception);\n        }\n    }\n\n    /**\n     * Refreshes the list of questions in the question bank.\n     */\n    function refreshQuestionsList() {\n        // Get list of questions thru AJAX.\n        var promises = ajax.call([\n            {\n                methodname: 'mod_threesixo_get_questions',\n                args: {}\n            }\n        ]);\n        promises[0].done(function(response) {\n            questions = response.questions;\n            var data = {\n                pickerMode: threeSixtyId,\n                questions: checkQuestions(questions)\n            };\n\n            templates.render('mod_threesixo/question_list', data)\n                .done(function(compiledSource) {\n                    $(\"#questionListWrapper\").html(compiledSource);\n                    bindItemActionEvents();\n                })\n                .fail(notification.exception);\n        }).fail(notification.exception);\n    }\n\n    /**\n     * Handles item deletion.\n     *\n     * @param {Number} questionId The question ID.\n     * @param {Number} threesixtyId The 360 instance ID.\n     */\n    function handleDeletion(questionId, threesixtyId) {\n        str.get_string('deletequestion', 'mod_threesixo').done(function(title) {\n            ModalFactory.create({\n                title: title,\n                body: str.get_string('confirmquestiondeletion', 'mod_threesixo'),\n                type: ModalFactory.types.SAVE_CANCEL\n            }).then(function(modal) {\n                modal.getRoot().on(ModalEvents.save, function() {\n\n                    // Get list of questions thru AJAX.\n                    var promises = ajax.call([\n                        {\n                            methodname: 'mod_threesixo_delete_question',\n                            args: {\n                                id: questionId,\n                                threesixtyid: threesixtyId,\n                            }\n                        }\n                    ]);\n                    promises[0].done(function() {\n                        refreshQuestionsList();\n                    }).fail(notification.exception);\n                });\n                modal.show();\n                return;\n            }).catch(notification.exception);\n        });\n    }\n\n    /**\n     * Binds the event listeners to question items such as edit, delete, checking.\n     */\n    var bindItemActionEvents = function() {\n        $(\".question-checkbox\").click(function() {\n            var questionId = parseInt(this.getAttribute('data-questionid'));\n\n            if ($(this).is(':checked')) {\n                selectedQuestions.push(questionId);\n            } else {\n                var index = selectedQuestions.indexOf(questionId);\n                if (index > -1) {\n                    selectedQuestions.splice(index, 1);\n                }\n            }\n        });\n\n        $(\".edit-question-button\").click(function() {\n            var threesixtyId = $(this).data('threesixtyid');\n            var questionId = $(this).data('questionid');\n            displayInputDialogue(threesixtyId, questionId);\n        });\n\n        $(\".delete-question-button\").click(function() {\n            var deleteButton = $(this);\n            var threesixtyId = deleteButton.data('threesixtyid');\n            var questionId = deleteButton.data('questionid');\n            handleDeletion(questionId, threesixtyId);\n        });\n    };\n\n    /**\n     * Create the context and render the question  bank template.\n     */\n    function renderQuestionBank() {\n        // Template context.\n        var context = {pickerMode: threeSixtyId};\n\n        // Render the question list.\n        var promises = ajax.call([\n            {\n                methodname: 'mod_threesixo_get_questions',\n                args: {}\n            }\n        ]);\n        promises[0].done(function(response) {\n            questions = response.questions;\n            context.questions = checkQuestions(questions);\n\n            // Render the template and display the comment chooser dialog.\n            var questionBankTemplate = templates.render('mod_threesixo/question_bank', context);\n            str.get_string('labelpickfromquestionbank', 'mod_threesixo')\n                .done(function(title) {\n                    displayQuestionBankDialogue(title, questionBankTemplate);\n                })\n                .fail(notification.exception);\n        }).fail(notification.exception);\n    }\n\n    var questionBankInit = function(id) {\n        threeSixtyId = id;\n\n        var methodCalls = [\n            {\n                methodname: 'mod_threesixo_get_question_types',\n                args: {}\n            }\n        ];\n\n        if (threeSixtyId) {\n            // Get selected items for the 360-degree feedback.\n            methodCalls.push({\n                methodname: 'mod_threesixo_get_items',\n                args: {\n                    threesixtyid: threeSixtyId\n                }\n            });\n        }\n\n        // Get list of questions thru AJAX.\n        var promises = ajax.call(methodCalls);\n        promises[0].done(function(response) {\n            questionTypes = response.questiontypes;\n            if (threeSixtyId) {\n                selectedQuestions = [];\n                selectedQuestionsOld = [];\n                promises[1].done(function(response) {\n                    var items = response.items;\n                    for (var i in items) {\n                        if (!items.hasOwnProperty(i)) {\n                            continue;\n                        }\n                        selectedQuestions.push(items[i].questionid);\n                        // Store originally selected question IDs for comparison later.\n                        selectedQuestionsOld.push(items[i].questionid);\n                    }\n                    renderQuestionBank();\n                }).fail(notification.exception);\n            } else {\n                renderQuestionBank();\n            }\n        }).fail(notification.exception);\n    };\n\n    /** @alias module:mod_threesixo/question_bank */\n    return {\n        init: questionBankInit,\n        displayInputDialogue: displayInputDialogue,\n        bindItemActionEvents: bindItemActionEvents\n    };\n});\n"],"names":["define","$","templates","notification","ajax","str","ModalFactory","ModalEvents","selectedQuestionsOld","selectedQuestions","threeSixtyId","questionTypes","questionBankDialogue","inputDialogue","questions","checkQuestions","i","question","indexOf","id","checked","displayInputDialogue","threesixtyId","questionId","get_string","done","title","data","threesixtyid","questionid","type","selectedId","questionTypeOptions","key","hasOwnProperty","questionType","typeVal","typeName","selected","push","getQuestionTypeOptions","dialogueTitle","bodyTemplate","body","render","setBody","show","create","types","SAVE_CANCEL","large","then","modal","getRoot","on","shown","focus","hidden","save","val","trim","method","call","methodname","args","refreshQuestionsList","fail","exception","errorMsg","errorMessage","append","attr","html","catch","response","pickerMode","compiledSource","bindItemActionEvents","click","parseInt","this","getAttribute","is","index","splice","deleteButton","handleDeletion","renderQuestionBank","context","questionBankTemplate","modalRoot","changed","each","questionids","require","items","refreshItemList","displayQuestionBankDialogue","init","methodCalls","promises","questiontypes"],"mappings":"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"}