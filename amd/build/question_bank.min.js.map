{"version":3,"file":"question_bank.min.js","sources":["../src/question_bank.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD code for the Question Bank.\n *\n * The question bank dialogue contains all the questions that can be added to the 360 feedback activity.\n * It also serves as the interface where questions can be added, edited, or even removed permanently from the question bank.\n *\n * @module     mod_threesixo/question_bank\n * @class      question_bank\n * @copyright  2016 Jun Pataleta <jun@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as templates from 'core/templates';\nimport * as notification from 'core/notification';\nimport * as ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Pending from 'core/pending';\nimport {notifyItemsUpdated} from \"mod_threesixo/events\";\n\n// Private variables and functions.\nlet selectedQuestionsOld,\n    selectedQuestions,\n    questions = [],\n    threeSixtyId,\n    questionTypes,\n    questionBankDialogue,\n    inputDialogue;\n\n/**\n * Fetches option data for the question type selector.\n *\n * @param {number} selectedId The currently selected question type.\n * @returns {Array}\n */\nfunction getQuestionTypeOptions(selectedId) {\n    const questionTypeOptions = [];\n    // Get question type options.\n    for (const key in questionTypes) {\n        if (!questionTypes.hasOwnProperty(key)) {\n            continue;\n        }\n        const questionType = {\n            typeVal: key,\n            typeName: questionTypes[key]\n        };\n\n        if (typeof selectedId !== 'undefined' && key == selectedId) {\n            questionType.selected = true;\n        }\n\n        questionTypeOptions.push(questionType);\n    }\n\n    return questionTypeOptions;\n}\n\n/**\n * Loops over the list of questions and marks a question as checked if it belongs to the list of selected questions.\n *\n * @param {Object[]} questions The questions to be checked.\n * @returns {Object[]} The list of checked questions.\n */\nfunction checkQuestions(questions) {\n    for (const i in questions) {\n        const question = questions[i];\n        if (selectedQuestions.indexOf(questions[i].id) !== -1) {\n            question.checked = true;\n        }\n    }\n    return questions;\n}\n\n/**\n * Renders the question input dialogue.\n *\n * @param {String} dialogueTitle\n * @param {Object} bodyTemplate\n */\nfunction renderInputDialogue(dialogueTitle, bodyTemplate) {\n    const pendingPromise = new Pending('mod_threesixo/question_input');\n    // Set dialog's body content.\n    if (inputDialogue) {\n        // Set dialogue body.\n        inputDialogue.setBody(bodyTemplate);\n        // Display the dialogue.\n        inputDialogue.show();\n        pendingPromise.resolve();\n    } else {\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: dialogueTitle,\n            body: bodyTemplate,\n            large: true\n        }).then(function(modal) {\n            inputDialogue = modal;\n\n            // Display the dialogue.\n            inputDialogue.show();\n\n            // On show handler.\n            modal.getRoot().on(ModalEvents.shown, function() {\n                // Focus on the question text area.\n                $(\"#question-input\").focus();\n            });\n\n            // On hide handler.\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                // Empty modal contents when it's hidden.\n                modal.setBody('');\n            });\n\n            // On save handler.\n            modal.getRoot().on(ModalEvents.save, function() {\n                const question = $(\"#question-input\").val().trim();\n                if (!question) {\n                    getString('requiredelement', 'form').done(function(errorMsg) {\n                        const errorMessage = $('<div/>').append(errorMsg)\n                            .attr('class', 'alert alert-error')\n                            .attr('role', 'alert');\n                        $('.error-container').html(errorMessage);\n                    }).fail(notification.exception);\n                    return;\n                }\n                const qtype = $(\"#question-type-select\").val();\n                const threesixtyid = $(\"#threesixtyid\").val();\n\n                const data = {\n                    question: question,\n                    type: qtype,\n                    threesixtyid: threesixtyid,\n                };\n\n                let method = 'mod_threesixo_add_question';\n                const questionId = $(\"#question-id\").val();\n                if (questionId) {\n                    method = 'mod_threesixo_update_question';\n                    data.id = questionId;\n                }\n\n                // Refresh the list of questions through AJAX.\n                const promises = ajax.call([\n                    {methodname: method, args: data}\n                ]);\n                promises[0].done(function() {\n                    refreshQuestionsList();\n                }).fail(notification.exception);\n            });\n            return;\n        }).then(() => {\n            pendingPromise.resolve();\n            return null;\n        }).catch(notification.exception);\n    }\n}\n\n/**\n * Function that displays the input dialogue.\n *\n * @param {Number} threesixtyId The 360 instance ID.\n * @param {Number} questionId The question ID.\n */\nconst displayInputDialogue = function(threesixtyId, questionId) {\n    getString('addanewquestion', 'mod_threesixo').done(function(title) {\n        const data = {\n            threesixtyid: threesixtyId\n        };\n\n        if (typeof questionId !== 'undefined') {\n            data.questionid = questionId;\n            for (const i in questions) {\n                const question = questions[i];\n                if (question.id === questionId) {\n                    data.question = question.question;\n                    data.type = question.type;\n                    break;\n                }\n            }\n        }\n\n        data.questionTypes = getQuestionTypeOptions(data.type);\n        const body = templates.render('mod_threesixo/item_edit', data);\n        renderInputDialogue(title, body);\n    }).fail(notification.exception);\n};\n\n/**\n * Displays the question bank dialogue.\n * @param {string} title\n * @param {Promise} questionBankTemplate\n */\nfunction displayQuestionBankDialogue(title, questionBankTemplate) {\n    const pendingPromise = new Pending('mod_threesixo/question_bank');\n\n    // Set dialog's body content.\n    if (questionBankDialogue) {\n        // Set dialogue body.\n        questionBankDialogue.setBody(questionBankTemplate);\n        // Display the dialogue.\n        questionBankDialogue.show();\n        pendingPromise.resolve();\n    } else {\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: title,\n            body: questionBankTemplate,\n            large: true\n        }).then(function(modal) {\n            const modalRoot = modal.getRoot();\n\n            // On hide handler.\n            modalRoot.on(ModalEvents.hidden, function() {\n                // Empty modal contents when it's hidden.\n                modal.setBody('');\n            });\n\n            modalRoot.on(ModalEvents.save, function() {\n                let changed = false;\n                // Check if the new selected questions exist in the old selected questions.\n                $.each(selectedQuestionsOld, function(key, questionId) {\n                    if (selectedQuestions.indexOf(questionId) === -1) {\n                        changed = true;\n                    }\n                });\n                // Conversely, if the newly selected items seem to have not changed,\n                // check if the old selected questions exist in the new selected questions.\n                if (!changed) {\n                    $.each(selectedQuestions, function(key, questionId) {\n                        if (selectedQuestionsOld.indexOf(questionId) === -1) {\n                            changed = true;\n                        }\n                    });\n                }\n\n                if (changed) {\n                    const data = {\n                        threesixtyid: threeSixtyId,\n                        questionids: selectedQuestions\n                    };\n\n                    // Save the selected questions.\n                    const promises = ajax.call([\n                        {methodname: 'mod_threesixo_set_items', args: data}\n                    ]);\n                    // Refresh the list of questions through AJAX.\n                    promises[0].then(function() {\n                        notifyItemsUpdated(threeSixtyId);\n                        return;\n                    }).catch(notification.exception);\n                } else {\n                    // Nothing changed in the selection, but it's possible that the question texts have been updated.\n                    // So better to refresh the list as well.\n                    notifyItemsUpdated(threeSixtyId);\n                }\n            });\n\n            questionBankDialogue = modal;\n\n            // Display the dialogue.\n            questionBankDialogue.show();\n            return;\n        }).then(() => {\n            pendingPromise.resolve();\n            return null;\n        }).catch(notification.exception);\n    }\n}\n\n/**\n * Binds the event listeners to question items such as edit, delete, checking.\n */\nconst bindItemActionEvents = function() {\n    $(\".question-checkbox\").click(function() {\n        const questionId = parseInt(this.getAttribute('data-questionid'));\n\n        if ($(this).is(':checked')) {\n            selectedQuestions.push(questionId);\n        } else {\n            const index = selectedQuestions.indexOf(questionId);\n            if (index > -1) {\n                selectedQuestions.splice(index, 1);\n            }\n        }\n    });\n\n    $(\".edit-question-button\").click(function() {\n        const threesixtyId = $(this).data('threesixtyid');\n        const questionId = $(this).data('questionid');\n        displayInputDialogue(threesixtyId, questionId);\n    });\n\n    $(\".delete-question-button\").click(function() {\n        const deleteButton = $(this);\n        const threesixtyId = deleteButton.data('threesixtyid');\n        const questionId = deleteButton.data('questionid');\n        handleDeletion(questionId, threesixtyId);\n    });\n};\n\n/**\n * Refreshes the list of questions in the question bank.\n */\nfunction refreshQuestionsList() {\n    // Get list of questions through AJAX.\n    const promises = ajax.call([\n        {\n            methodname: 'mod_threesixo_get_questions',\n            args: {}\n        }\n    ]);\n    promises[0].done(function(response) {\n        questions = response.questions;\n        const data = {\n            pickerMode: threeSixtyId,\n            questions: checkQuestions(questions)\n        };\n\n        templates.render('mod_threesixo/question_list', data)\n            .done(function(compiledSource) {\n                $(\"#questionListWrapper\").html(compiledSource);\n                bindItemActionEvents();\n            })\n            .fail(notification.exception);\n    }).fail(notification.exception);\n}\n\n/**\n * Handles item deletion.\n *\n * @param {Number} questionId The question ID.\n * @param {Number} threesixtyId The 360 instance ID.\n */\nfunction handleDeletion(questionId, threesixtyId) {\n    getString('deletequestion', 'mod_threesixo').done(function(title) {\n        ModalFactory.create({\n            title: title,\n            body: getString('confirmquestiondeletion', 'mod_threesixo'),\n            type: ModalFactory.types.SAVE_CANCEL\n        }).then(function(modal) {\n            modal.getRoot().on(ModalEvents.save, function() {\n\n                // Get list of questions through AJAX.\n                const promises = ajax.call([\n                    {\n                        methodname: 'mod_threesixo_delete_question',\n                        args: {\n                            id: questionId,\n                            threesixtyid: threesixtyId,\n                        }\n                    }\n                ]);\n                promises[0].done(function() {\n                    refreshQuestionsList();\n                }).fail(notification.exception);\n            });\n            modal.show();\n            return;\n        }).catch(notification.exception);\n    });\n}\n\n\n/**\n * Create the context and render the question  bank template.\n */\nfunction renderQuestionBank() {\n    // Template context.\n    const context = {pickerMode: threeSixtyId};\n\n    // Render the question list.\n    const promises = ajax.call([\n        {\n            methodname: 'mod_threesixo_get_questions',\n            args: {}\n        }\n    ]);\n    promises[0].done(function(response) {\n        questions = response.questions;\n        context.questions = checkQuestions(questions);\n\n        // Render the template and display the comment chooser dialog.\n        const questionBankTemplate = templates.render('mod_threesixo/question_bank', context);\n        getString('labelpickfromquestionbank', 'mod_threesixo')\n            .done(function(title) {\n                displayQuestionBankDialogue(title, questionBankTemplate);\n            })\n            .fail(notification.exception);\n    }).fail(notification.exception);\n}\n\nconst questionBankInit = function(id) {\n    threeSixtyId = id;\n\n    const methodCalls = [\n        {\n            methodname: 'mod_threesixo_get_question_types',\n            args: {}\n        }\n    ];\n\n    if (threeSixtyId) {\n        // Get selected items for the 360-degree feedback.\n        methodCalls.push({\n            methodname: 'mod_threesixo_get_items',\n            args: {\n                threesixtyid: threeSixtyId\n            }\n        });\n    }\n\n    // Get list of questions through AJAX.\n    const promises = ajax.call(methodCalls);\n    promises[0].done(function(response) {\n        questionTypes = response.questiontypes;\n        if (threeSixtyId) {\n            selectedQuestions = [];\n            selectedQuestionsOld = [];\n            promises[1].done(function(response) {\n                const items = response.items;\n                for (const i in items) {\n                    if (!items.hasOwnProperty(i)) {\n                        continue;\n                    }\n                    selectedQuestions.push(items[i].questionid);\n                    // Store originally selected question IDs for comparison later.\n                    selectedQuestionsOld.push(items[i].questionid);\n                }\n                renderQuestionBank();\n            }).fail(notification.exception);\n        } else {\n            renderQuestionBank();\n        }\n    }).fail(notification.exception);\n};\n\n/** @alias module:mod_threesixo/question_bank */\nexport default {\n    init: questionBankInit,\n    displayInputDialogue: displayInputDialogue,\n    bindItemActionEvents: bindItemActionEvents\n};\n"],"names":["selectedQuestionsOld","selectedQuestions","threeSixtyId","questionTypes","questionBankDialogue","inputDialogue","questions","checkQuestions","i","question","indexOf","id","checked","displayInputDialogue","threesixtyId","questionId","done","title","data","threesixtyid","questionid","type","selectedId","questionTypeOptions","key","hasOwnProperty","questionType","typeVal","typeName","selected","push","getQuestionTypeOptions","dialogueTitle","bodyTemplate","pendingPromise","Pending","setBody","show","resolve","create","ModalFactory","types","SAVE_CANCEL","body","large","then","modal","getRoot","on","ModalEvents","shown","focus","hidden","save","val","trim","errorMsg","errorMessage","append","attr","html","fail","notification","exception","method","ajax","call","methodname","args","refreshQuestionsList","catch","renderInputDialogue","templates","render","bindItemActionEvents","click","parseInt","this","getAttribute","is","index","splice","deleteButton","handleDeletion","response","pickerMode","compiledSource","renderQuestionBank","context","questionBankTemplate","modalRoot","changed","each","questionids","displayQuestionBankDialogue","init","methodCalls","promises","questiontypes","items"],"mappings":"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"}